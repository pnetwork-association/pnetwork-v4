import { Event } from 'ethers'

import { Chains } from '../src/Chains'
import { ProofcastEventAttestator } from '../src/ProofcastEventAttestator'

describe('Proofcast Event Attestator Tests', () => {
  test('Should generate a statement and a signature correctly', async () => {
    const privateKey =
      'dfcc79a57e91c42d7eea05f82a08bd1b7e77f30236bb7c56fe98d3366a1929c4'
    const blockHash =
      '0xa880cb2ab67ec9140db0f6de238b34d4108f6fab99315772ee987ef9002e0e63'
    const transactionHash =
      '0x11365bbee18058f12c27236e891a66999c4325879865303f785854e9169c257a'
    const address = '0x2946259E0334f33A064106302415aD3391BeD384'
    const topics = [
      '0x9b706941b48091a1c675b439064f40b9d43c577d9c7134cce93179b9b0bf2a52',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
    ]
    const data =
      '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051a240271ab8ab9f9a21c82d9a85396b704e164d0000000000000000000000000000000000000000000000000000000000007a6a00000000000000000000000000000000000000000000000000000000000026fc0000000000000000000000002b5ad5c4795c026514f8317c7a215e218dccd6cf000000000000000000000000000000000000000000000000000000000000002a30783638313345623933363233373245454636323030663362316462433366383139363731634241363900000000000000000000000000000000000000000000'

    const ea = new ProofcastEventAttestator({
      version: 0x01,
      protocolId: 0x01,
      chainId: Chains.Hardhat,
      privateKey,
    })

    const event = {
      address,
      topics,
      data,
      blockHash,
      transactionHash,
    } as unknown as Event

    const expectedSignature =
      '0x2ac391f76e0b65c22d954dd83373b14cb90419693607b0520b713d8fb0494e7407ed9c6ec02f7f877e8a297c8d554998e31f8c365388cdd80e4f290dd969fd721c'

    expect(ea.sign(event)).toStrictEqual(expectedSignature)
  })
})
